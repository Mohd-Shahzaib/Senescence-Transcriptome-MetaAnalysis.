# ===============================
# RNA-seq Batch Correction (DESeq2 + VST + SVA)
# Customized for your metadata structure
# ===============================

suppressPackageStartupMessages({
  library(DESeq2)
  library(limma)
  library(sva)
  library(ggplot2)
  library(pheatmap)
  library(readr)
  library(dplyr)
})

set.seed(20250825)

# ---- 1. Load Input Files ----
counts_file <- "countmergematrix.csv"
meta_file   <- "metadata_strict_even_batches_ordered.csv"

raw_counts <- read.csv(counts_file, row.names = 1, check.names = FALSE)
batch_info <- read.csv(meta_file, row.names = 1)

# ---- 2. Align samples ----
samples_to_keep <- intersect(colnames(raw_counts), rownames(batch_info))
if (length(samples_to_keep) == 0) stop("❌ No overlapping samples between counts and metadata")

raw_counts <- raw_counts[, samples_to_keep, drop = FALSE]
batch_info <- batch_info[samples_to_keep, , drop = FALSE]
stopifnot(identical(colnames(raw_counts), rownames(batch_info)))

# ---- 3. Clean metadata ----
batch_info$Condition <- tolower(trimws(batch_info$Condition))
batch_info$Batch     <- trimws(batch_info$Batch)

batch_info$Condition <- factor(batch_info$Condition,
                               levels = c("control", "replicative_senescence", "acute_senescence"))
batch_info$Batch     <- factor(batch_info$Batch)

batch_info$Condition <- droplevels(batch_info$Condition)
batch_info$Batch     <- droplevels(batch_info$Batch)

# ---- 4. Build Design Formula ----
if (nlevels(batch_info$Condition) > 1 && nlevels(batch_info$Batch) > 1) {
  design_formula <- ~ Batch + Condition
} else if (nlevels(batch_info$Condition) > 1) {
  design_formula <- ~ Condition
} else if (nlevels(batch_info$Batch) > 1) {
  design_formula <- ~ Batch
} else {
  stop("❌ Cannot design model — both Condition and Batch have only 1 level.")
}

# ---- 5. Create DESeq2 Dataset ----
dds <- DESeqDataSetFromMatrix(countData = round(raw_counts),
                              colData   = batch_info,
                              design    = design_formula)

# Filter low-expressed genes
keep <- rowSums(counts(dds) >= 10) >= 2
dds <- dds[keep, ]

# ---- 6. Normalize and Transform ----
dds <- estimateSizeFactors(dds)
vsd <- vst(dds, blind = TRUE)

# ---- 7. PCA Plot Function (Preserve Variance Info) ----
# pca_plot <- function(mat, meta, title){
#   pca <- prcomp(t(mat), center = TRUE)
#   var_expl <- 100 * (pca$sdev^2 / sum(pca$sdev^2))
#   df <- data.frame(pca$x[,1:2], meta)
#   ggplot(df, aes(PC1, PC2, color = Condition)) +
#     geom_point(size = 3, alpha = 0.9) +
#     labs(title = title,
#          x = paste0("PC1 (", round(var_expl[1], 1), "%)"),
#          y = paste0("PC2 (", round(var_expl[2], 1), "%)")) +
#     theme_bw(base_size = 14)
# }
# ---- PCA Plot Function with Condition (color) and Batch (shape) ----
pca_plot <- function(mat, meta, title){
  pca <- prcomp(t(mat), center = TRUE)
  var_expl <- 100 * (pca$sdev^2 / sum(pca$sdev^2))
  df <- data.frame(pca$x[,1:2], meta)
  
  # Manually assign up to 7 unique shapes for batches
  batch_levels <- levels(factor(df$Batch))
  shapes <- c(15, 16, 17, 18, 3, 4, 8)[1:length(batch_levels)]
  
  ggplot(df, aes(PC1, PC2, color = Condition, shape = Batch)) +
    geom_point(size = 3, alpha = 0.9) +
    scale_shape_manual(values = shapes) +
    labs(title = title,
         x = paste0("PC1 (", round(var_expl[1], 1), "%)"),
         y = paste0("PC2 (", round(var_expl[2], 1), "%)")) +
    theme_bw(base_size = 14)
}

# ---- 8. PCA BEFORE Batch Correction ----
# plt_pca_before <- pca_plot(assay(vsd), batch_info, "PCA — BEFORE batch correction")
# ggsave("PCA_BEFORE.png", plt_pca_before, width = 7, height = 6, dpi = 300)
plt_pca_before <- pca_plot(assay(vsd), batch_info, "PCA — BEFORE Batch Correction")
ggsave("pca_before_batch_correction.png", plt_pca_before, width = 7, height = 6, dpi = 300)

# ---- 9. SVA Model Construction ----
mod  <- model.matrix(~ Condition + Batch, data = batch_info)
mod0 <- model.matrix(~ 1, data = batch_info)

# ---- 10. Run SVA ----
sva_res <- svaseq(assay(vsd), mod, mod0)
write.csv(sva_res$sv, "sva_surrogate_variables.csv")

# ---- 11. Remove Batch Effect for Visualization ----
assay_vsd_rm <- removeBatchEffect(assay(vsd),
                                  batch = batch_info$Batch,
                                  covariates = sva_res$sv,
                                  design = model.matrix(~ Condition, data = batch_info))

# ---- 12. PCA AFTER Batch Correction ----
# plt_pca_after <- pca_plot(assay_vsd_rm, batch_info, "PCA — AFTER batch correction (SVA + DESeq2)")
# ggsave("PCA_AFTER.png", plt_pca_after, width = 7, height = 6, dpi = 300)

plt_pca_after <- pca_plot(assay_vsd_rm, batch_info, "PCA — AFTER Batch Correction (SVA + DESeq2)")
ggsave("pca_after_batch_correction.png", plt_pca_after, width = 7, height = 6, dpi = 300)

# ---- 13. Save Outputs ----
write.csv(counts(dds, normalized = TRUE), "normalized_counts_deseq2.csv")
write.csv(assay(vsd),                   "vst_matrix_before_batch.csv")
write.csv(assay_vsd_rm,                 "vst_matrix_after_batch.csv")

message("✅ All steps complete: Batch correction, PCA, and outputs saved.")    # ---- Load libraries ----
suppressPackageStartupMessages({
  library(dplyr)
  library(readr)
  library(tidyverse)
  library(pheatmap)
  library(VennDiagram)
  
  
})

# ---- Acute file ----
acute <- read_csv("DGE_Acute_vs_Control_Annotated_CORRECTED_EXP.csv")

# Filter out pseudogenes + significant genes with |log2FC| >= 1
# acute_filtered <- acute %>%
#   filter(!grepl("pseudogene", Description, ignore.case = TRUE)) %>%
#   filter(padj < 0.05 & abs(log2FoldChange) >= 1)


acute_filtered <- acute %>%
  filter(!is.na(log2FoldChange) & !is.na(padj)) %>%                     # remove NAs
  filter(!grepl("pseudogene", Description, ignore.case = TRUE)) %>%     # remove pseudogenes
  filter(!is.na(Symbol) & Symbol != "") %>%                             # remove blank symbols
  filter(!grepl("^LOC", Symbol, ignore.case = TRUE)) %>%                # remove LOC/uncharacterized
  filter(padj < 0.05 & abs(log2FoldChange) >= 1) %>%
  filter(abs(log2FoldChange) <= 10)  

# Separate up and down
acute_up   <- acute_filtered %>% filter(log2FoldChange > 0)
acute_down <- acute_filtered %>% filter(log2FoldChange < 0)

# Save files
write_csv(acute_up, "acute_up_degs.csv")
write_csv(acute_down, "acute_down_degs.csv")

cat("Acute - Up genes:", nrow(acute_up), " | Down genes:", nrow(acute_down), "\n")


# ---- Replicative file ----
rep <- read_csv("DGE_Replicative_vs_Control_Annotated_CORRECTED_EXP.csv")

# rep_filtered <- rep %>%
#   filter(!grepl("pseudogene", Description, ignore.case = TRUE)) %>%
#   filter(padj < 0.05 & abs(log2FoldChange) >= 1)
rep_filtered <- rep %>%
  filter(!is.na(log2FoldChange) & !is.na(padj)) %>%                     # remove NAs
  filter(!grepl("pseudogene", Description, ignore.case = TRUE)) %>%     # remove pseudogenes
  filter(!is.na(Symbol) & Symbol != "") %>%                             # remove blank symbols
  filter(!grepl("^LOC", Symbol, ignore.case = TRUE)) %>%                # remove LOC/uncharacterized
  filter(padj < 0.05 & abs(log2FoldChange) >= 1) %>%
  filter(abs(log2FoldChange) <= 10)  

rep_up   <- rep_filtered %>% filter(log2FoldChange > 0)
rep_down <- rep_filtered %>% filter(log2FoldChange < 0)

write_csv(rep_up, "replicative_up_degs.csv")
write_csv(rep_down, "replicative_down_degs.csv")

cat("Replicative - Up genes:", nrow(rep_up), " | Down genes:", nrow(rep_down), "\n")
######################################################################################################
######################################################################################################
######################################################################################################
########################## Common genes in up and down ##############################

# ---- Find common genes ----
common_up   <- intersect(acute_up$Symbol, rep_up$Symbol)
common_down <- intersect(acute_down$Symbol, rep_down$Symbol)

# Save common genes with annotations
acute_up %>% filter(Symbol %in% common_up) %>%
  write_csv("common_up_degs.csv")

acute_down %>% filter(Symbol %in% common_down) %>%
  write_csv("common_down_degs.csv")


######################################################################################################
######################################################################################################
######################################################################################################
######################## Venn diagram ####################################################

png("venn_degs_up.png", width = 1800, height = 1600, res = 300)
grid::grid.draw(
  venn.diagram(
    x = list(Acute_Up = acute_up$Symbol, Replicative_Up = rep_up$Symbol),
    filename = NULL,
    fill = c("#E41A1C", "#377EB8"),
    alpha = 0.6,
    cex = 1.6,          # number size inside venn
    fontface = "bold",
    cat.cex = 1.4,      # category labels size
    cat.pos = c(-20, 20), # adjust label positions
    cat.dist = 0.05,    # distance from circle
    main = "Common Upregulated DEGs",
    main.cex = 1.8,
    main.fontface = "bold"
  )
)
dev.off()

png("venn_degs_down.png", width = 1800, height = 1600, res = 300)
grid::grid.draw(
  venn.diagram(
    x = list(Acute_Down = acute_down$Symbol, Replicative_Down = rep_down$Symbol),
    filename = NULL,
    fill = c("#4DAF4A", "#984EA3"),
    alpha = 0.6,
    cex = 1.6,
    fontface = "bold",
    cat.cex = 1.3,
    cat.pos = c(-20, 20),
    cat.dist = 0.02,
    main = "Common Downregulated DEGs",
    main.cex = 1.8,
    main.fontface = "bold"
  )
)
dev.off()

######################################################################################################
######################################################################################################
######################################################################################################
######################## volcano plot  ####################################################



# ---- Load libraries ----
suppressPackageStartupMessages({
  library(ggplot2)
  library(dplyr)
  library(readr)
  library(ggrepel)
})

# ---- Load your file ----
df <- read_csv("DGE_Acute_vs_Control_Annotated_CORRECTED_EXP.csv")
df <- df %>%
  filter(!is.na(log2FoldChange) & !is.na(padj)) %>%                     # remove NAs
  filter(!grepl("pseudogene", Description, ignore.case = TRUE)) %>%     # remove pseudogenes
  filter(!is.na(Symbol) & Symbol != "") %>%                             # remove blank symbols
  filter(!grepl("^LOC", Symbol, ignore.case = TRUE)) %>%                # remove LOC/uncharacterized
  filter(abs(log2FoldChange) <= 7)                                      # cap extreme FC values

# ---- Prepare data ----
df <- df %>%
  mutate(Regulation = case_when(
    padj < 0.05 & log2FoldChange >= 1  ~ "Up",
    padj < 0.05 & log2FoldChange <= -1 ~ "Down",
    padj < 0.05                        ~ "Significant",   # 👈 new category
    TRUE                               ~ "NS"
  ))
senescence_genes <- c("CDKN2A","CDKN1A","TP53","CDKN2B","RB1",
                       "STAT1","IL6","IL1A","IL1B",
                       "CXCL1","CXCL2","CXCL8","CXCL12",
                       "CCL2","CCL20",
                       
                       # Downregulated hallmarks (cell cycle, chromatin, mitotic drivers)
                       "LMNB1","HELLS","CCNB1","CDK1","CDC25C",
                       "CCNE2","E2F1","MKI67","PLK1","TOP2A",
                       "MCM2","MCM3","MCM4","MCM5","MCM6","MCM7",
                       "EZH2",
                       
                       # Additional key senescence markers
                       "CDKN2D",   # p19INK4d, CDK inhibitor
                       "GDF15",    # stress cytokine, SASP
                       "CXCL10","CXCL11", # interferon-related SASP chemokines
                       "CCL5",     # RANTES, SASP
                       "TNFRSF10C","TNFRSF10D", # TRAIL decoy receptors, anti-apoptotic
                       "SERPINE1", # PAI-1, classical senescence effector
                       "GLB1"      # beta-galactosidase (SA-β-gal gene)
)


df$Label <- ifelse(df$Symbol %in% senescence_genes, df$Symbol, NA)

# ---- Volcano Plot ----
p <- ggplot(df, aes(x = log2FoldChange, y = -log10(padj), color = Regulation)) +
  geom_point(alpha = 0.7, size = 1.8) +
  scale_color_manual(values = c("Up"="#E41A1C",
                                "Down"="#377EB8",
                                "NS"="grey70",
                                "Significant"="#4DAF4A")) +
  geom_vline(xintercept = c(-1,1), linetype="dashed", color="black") +
  geom_hline(yintercept = -log10(0.05), linetype="dashed", color="black") +
  geom_text_repel(aes(label=Label),
                  size = 3.5,
                  color = "black",
                  max.overlaps = 100,
                  fontface = "plain") +
  theme_minimal(base_size = 14) +
  labs(title="Volcano Plot (Acute vs Control)",
       x="log2(Fold Change)",
       y="-log10(Adjusted p-value)",
       color="Regulation") +
  theme(plot.title = element_text(hjust=0.5, face="bold")) +
  coord_cartesian(xlim = c(-6, 6))

# ---- Save plot ----
ggsave("volcano_acute.jpg", p, width=9, height=7, dpi=1200)

df1 <- read_csv("DGE_Replicative_vs_Control_Annotated_CORRECTED_EXP.csv")

df1 <- df1 %>%
  filter(!is.na(log2FoldChange) & !is.na(padj)) %>%                     # remove NAs
  filter(!grepl("pseudogene", Description, ignore.case = TRUE)) %>%     # remove pseudogenes
  filter(!is.na(Symbol) & Symbol != "") %>%                             # remove blank symbols
  filter(!grepl("^LOC", Symbol, ignore.case = TRUE)) %>%                # remove LOC/uncharacterized
  filter(abs(log2FoldChange) <= 7)                                      # cap extreme FC values

# ---- Prepare data ----
df1 <- df1 %>%
  mutate(Regulation = case_when(
    padj < 0.05 & log2FoldChange >= 1  ~ "Up",
    padj < 0.05 & log2FoldChange <= -1 ~ "Down",
    padj < 0.05                        ~ "Significant",   # 👈 new category
    TRUE                               ~ "NS"
  ))

senescence_genes2 <- c("CDKN2A","CDKN1A","TP53","CDKN2B","RB1",
                       "STAT1","IL6","IL1A","IL1B",
                       "CXCL1","CXCL2","CXCL8","CXCL12",
                       "CCL2","CCL20",
                       
                       # Downregulated hallmarks (cell cycle, chromatin, mitotic drivers)
                       "LMNB1","HELLS","CCNB1","CDK1","CDC25C",
                       "CCNE2","E2F1","MKI67","PLK1","TOP2A",
                       "MCM2","MCM3","MCM4","MCM5","MCM6","MCM7",
                       "EZH2",
                       
                       # Additional key senescence markers
                       "CDKN2D",   # p19INK4d, CDK inhibitor
                       "GDF15",    # stress cytokine, SASP
                       "CXCL10","CXCL11", # interferon-related SASP chemokines
                       "CCL5",     # RANTES, SASP
                       "TNFRSF10C","TNFRSF10D", # TRAIL decoy receptors, anti-apoptotic
                       "SERPINE1", # PAI-1, classical senescence effector
                       "GLB1"      # beta-galactosidase (SA-β-gal gene)
)

df1$Label <- ifelse(df1$Symbol %in% senescence_genes2, df1$Symbol, NA)

# ---- Volcano Plot ----
p2 <- ggplot(df1, aes(x = log2FoldChange, y = -log10(padj), color = Regulation)) +
  geom_point(alpha = 0.7, size = 1.8) +
  scale_color_manual(values = c("Up"="#E41A1C", "Down"="#377EB8", "NS"="grey70", "Significant"="#4DAF4A")) +
  geom_vline(xintercept = c(-1,1), linetype="dashed", color="black") +
  geom_hline(yintercept = -log10(0.05), linetype="dashed", color="black") +
  geom_text_repel(aes(label=Label),
                  size = 3.5,
                  color = "black",    # <- force black text
                  max.overlaps = 100,
                  fontface = "plain") +
  theme_minimal(base_size = 14) +
  labs(title="Volcano Plot (Replicative vs Control)",
       x="log2(Fold Change)",
       y="-log10(Adjusted p-value)",
       color="Regulation") +
  theme(plot.title = element_text(hjust=0.5, face="bold")) +
  coord_cartesian(xlim = c(-6, 6), ylim = c(0, 30))

# ---- Save plot ----
ggsave("volcano_replicative.jpg", p2, width=9, height=7, dpi=1200)



######################################################################################################
######################################################################################################
######################################################################################################
######################## heatmaps  ####################################################




df4 <- read_csv("DGE_Acute_vs_Control_Annotated_CORRECTED_EXP.csv")

acute_filtered <- df4 %>%
  filter(!is.na(log2FoldChange) & !is.na(padj)) %>%
  filter(!grepl("pseudogene", Description, ignore.case = TRUE)) %>%
  filter(!is.na(Symbol) & Symbol != "") %>%
  filter(!grepl("^LOC", Symbol, ignore.case = TRUE)) %>%
  filter(padj < 0.05 & abs(log2FoldChange) >= 1)

# Top 25 up and down separately
top_up <- acute_filtered %>%
  filter(log2FoldChange > 0) %>%
  arrange(padj) %>%
  slice_head(n = 25)

top_down <- acute_filtered %>%
  filter(log2FoldChange < 0) %>%
  arrange(padj) %>%
  slice_head(n = 25)

top_degs <- bind_rows(top_up, top_down)

# Matrix for heatmap
mat <- as.matrix(top_degs$log2FoldChange)
rownames(mat) <- top_degs$Symbol
colnames(mat) <- "log2FC"

# Row annotation for regulation
row_anno <- data.frame(Regulation = ifelse(top_degs$log2FoldChange > 0, "Up", "Down"))
rownames(row_anno) <- top_degs$Symbol

# Color scheme for annotation
anno_colors <- list(Regulation = c(Up = "#E41A1C", Down = "#377EB8"))

# Save as high-resolution PNG
png("heatmap_acute_top50_degs.png", width = 1800, height = 2400, res = 400)

pheatmap(mat,
         cluster_rows = TRUE,   # keep gene order same (top_up + top_down)
         cluster_cols = FALSE,
         color = colorRampPalette(c("blue","white","red"))(200),
         breaks = seq(-4, 4, length.out = 201),
         main = "Heatmap Acute Senescence",
         fontsize = 8,
         fontsize_row = 8,
         border_color = NA,
         annotation_row = row_anno,
         annotation_colors = anno_colors)

dev.off()
###############################################################################################



# ---- Load data ----
df5 <- read_csv("DGE_Replicative_vs_Control_Annotated_CORRECTED_EXP.csv")

# ---- Filter DEGs ----
replicative_filtered <- df5 %>%
  filter(!is.na(log2FoldChange) & !is.na(padj)) %>%
  filter(!grepl("pseudogene", Description, ignore.case = TRUE)) %>%
  filter(!is.na(Symbol) & Symbol != "") %>%
  filter(!grepl("^LOC", Symbol, ignore.case = TRUE)) %>%
  filter(padj < 0.05 & abs(log2FoldChange) >= 1)

# ---- Top 25 up and down ----
top_up1 <- replicative_filtered %>%
  filter(log2FoldChange > 0) %>%
  arrange(padj) %>%
  slice_head(n = 25)

top_down1 <- replicative_filtered %>%
  filter(log2FoldChange < 0) %>%
  arrange(padj) %>%
  slice_head(n = 25)

top_degs1 <- bind_rows(top_up1, top_down1)

# ---- Heatmap matrix ----
mat1 <- as.matrix(top_degs1$log2FoldChange)
rownames(mat1) <- top_degs1$Symbol
colnames(mat1) <- "log2FC"

# ---- Row annotation (Up / Down) ----
row_anno1 <- data.frame(Regulation = ifelse(top_degs1$log2FoldChange > 0, "Up", "Down"))
rownames(row_anno1) <- top_degs1$Symbol

anno_colors1 <- list(Regulation = c(Up = "#E41A1C", Down = "#377EB8"))

# ---- Save high-resolution PNG ----
png("heatmap_replicative_top50_degs.png", width = 1800, height = 2400, res = 400)

pheatmap(mat1,
         cluster_rows = TRUE,   # keep order: top_up first then top_down
         cluster_cols = FALSE,
         color = colorRampPalette(c("blue","white","red"))(200),
         breaks = seq(-4, 4, length.out = 201),
         main = "Heatmap Replicative Senescence",
         fontsize = 8,
         fontsize_row = 8,
         border_color = NA,
         annotation_row = row_anno1,
         annotation_colors = anno_colors1)

dev.off()

################################################################
### senescence genes heatmap ##

senescence_genes <- c(
  "CDKN2A","CDKN1A","TP53","CDKN2B","RB1",
  "STAT1","IL6","IL1A","IL1B",
  "CXCL1","CXCL2","CXCL8","CXCL12",
  "CCL2","CCL20",
  "LMNB1","HELLS","CCNB1","CDK1","CDC25C",
  "CCNE2","E2F1","MKI67","PLK1","TOP2A",
  "MCM2","MCM3","MCM4","MCM5","MCM6","MCM7",
  "EZH2","CDKN2D","GDF15","CXCL10","CXCL11",
  "CCL5","TNFRSF10C","TNFRSF10D",
  "SERPINE1","GLB1",
  # add a few stress/ROS/repair markers to make ~50
  "H2AFX","ATM","ATR","BCL2","BAX",
  "PML","HMGA2","FOXM1","SIRT1","SOD2"
)
length(senescence_genes)   # should be 50
df_replicative <- read_csv("DGE_Replicative_vs_Control_Annotated_CORRECTED_EXP.csv")

replicative_sen <- df_replicative %>%
  filter(Symbol %in% senescence_genes) %>%
  filter(!is.na(log2FoldChange)) %>%
  select(Symbol, log2FoldChange)

mat_rep <- as.matrix(replicative_sen$log2FoldChange)
rownames(mat_rep) <- replicative_sen$Symbol
colnames(mat_rep) <- "log2FC"

row_anno_rep <- data.frame(Regulation = ifelse(mat_rep > 0, "Up", "Down"))
rownames(row_anno_rep) <- rownames(mat_rep)

anno_colors <- list(Regulation = c(Up="#E41A1C", Down="#377EB8"))

png("heatmap_senescence50_replicative.png", width=1800, height=2400, res=400)
pheatmap(mat_rep,
         cluster_rows = TRUE,
         cluster_cols = FALSE,
         color = colorRampPalette(c("blue","white","red"))(200),
         breaks = seq(-4, 4, length.out = 201),
         main = "50 Senescence Genes – Replicative vs Control",
         fontsize = 9, fontsize_row = 8,
         border_color = NA,
         annotation_row = row_anno_rep,
         annotation_colors = anno_colors)
dev.off()


df_acute <- read_csv("DGE_Acute_vs_Control_Annotated_CORRECTED_EXP.csv")

acute_sen <- df_acute %>%
  filter(Symbol %in% senescence_genes) %>%
  filter(!is.na(log2FoldChange)) %>%
  select(Symbol, log2FoldChange)

mat_acute <- as.matrix(acute_sen$log2FoldChange)
rownames(mat_acute) <- acute_sen$Symbol
colnames(mat_acute) <- "log2FC"

row_anno_acute <- data.frame(Regulation = ifelse(mat_acute > 0, "Up", "Down"))
rownames(row_anno_acute) <- rownames(mat_acute)

png("heatmap_senescence50_acute.png", width=1800, height=2400, res=400)
pheatmap(mat_acute,
         cluster_rows = TRUE,
         cluster_cols = FALSE,
         color = colorRampPalette(c("blue","white","red"))(200),
         breaks = seq(-4, 4, length.out = 201),
         main = "50 Senescence Genes – Acute vs Control",
         fontsize = 9, fontsize_row = 8,
         border_color = NA,
         annotation_row = row_anno_acute,
         annotation_colors = anno_colors)
dev.off()




    library(tidyverse)
library(clusterProfiler)
library(org.Hs.eg.db)
library(stringr)
library(ggvenn)
library(dplyr)

# Load Acute Up file
acute_up <- read_csv("acute_up_degs.csv")

# Extract Entrez IDs (first column)
genes_up <- acute_up$GeneID   # or pull(1) if unnamed

# Run enrichment
ego_acute_up <- enrichGO(gene          = genes_up,
                         OrgDb         = org.Hs.eg.db,
                         keyType       = "ENTREZID",   # <-- important!
                         ont           = "BP",
                         pAdjustMethod = "BH",
                         pvalueCutoff  = 0.05,
                         qvalueCutoff  = 0.05,
                         readable      = TRUE)

# Save results
write_csv(as.data.frame(ego_acute_up), "go_bp_acute_up.csv")




# -------------------------
# Acute Down
# -------------------------
acute_down <- read_csv("acute_down_degs.csv")

genes_down<- acute_down$GeneID 


ego_acute_down <- enrichGO(gene          = genes_down,
                           OrgDb         = org.Hs.eg.db,
                           keyType       = "ENTREZID",   # <-- important!
                           ont           = "BP",
                           pAdjustMethod = "BH",
                           pvalueCutoff  = 0.05,
                           qvalueCutoff  = 0.05,
                           readable      = TRUE)

write_csv(as.data.frame(ego_acute_down), "go_bp_acute_down.csv")


# -------------------------
# Replicative Up
# -------------------------
rep_up <- read_csv("replicative_up_degs.csv")

genes_up1<- rep_up$GeneID 


ego_rep_up <- enrichGO(gene          = genes_up1,
                       OrgDb         = org.Hs.eg.db,
                       keyType       = "ENTREZID",   # <-- important!
                       ont           = "BP",
                       pAdjustMethod = "BH",
                       pvalueCutoff  = 0.05,
                       qvalueCutoff  = 0.05,
                       readable      = TRUE)

write_csv(as.data.frame(ego_rep_up), "go_bp_replicative_up.csv")


# -------------------------
# Replicative Down
# -------------------------
rep_down <- read_csv("replicative_down_degs.csv")

genes_down1 <- rep_down$GeneID

ego_rep_down <- enrichGO(genes_down1,
                         OrgDb         = org.Hs.eg.db,
                         keyType       = "ENTREZID",   # <-- important!
                         ont           = "BP",
                         pAdjustMethod = "BH",
                         pvalueCutoff  = 0.05,
                         qvalueCutoff  = 0.05,
                         readable      = TRUE)
write_csv(as.data.frame(ego_rep_down), "go_bp_replicative_down.csv")
##################################################################################################################################

#### Common values for up files and plots



# ---- Load results ----
acute_up <- read_csv("go_bp_acute_up.csv")
rep_up   <- read_csv("go_bp_replicative_up.csv")
# ---- Extract Description (GO term names) ----
acute_terms <- acute_up$Description
rep_terms   <- rep_up$Description

# ---- 1. Venn Diagram ----
venn_data <- list(
  Acute_Up = acute_terms,
  Replicative_Up = rep_terms
)

png("go_bp_venn_up.png", width = 1600, height = 1200, res = 300)
ggvenn(venn_data,
       fill_color = c("#E41A1C", "#377EB8"),
       stroke_size = 0.8, set_name_size = 5) +
  ggtitle("Overlap of GO:BP terms (Acute Up vs Replicative Up)")
dev.off()
# ---- Save Venn diagram ----

common_up <- inner_join(
  acute_up %>% dplyr::select(ID, Description, padj_Acute = p.adjust, FoldEnrichment_Acute = FoldEnrichment),
  rep_up   %>% dplyr::select(ID, Description, padj_Rep = p.adjust, FoldEnrichment_Rep = FoldEnrichment),
  by = c("ID","Description")
)

# ---- Fisher’s method for combined p-value ----
common_up <- common_up %>%
  rowwise() %>%
  mutate(
    Fisher_chisq = -2 * (log(padj_Acute) + log(padj_Rep)),
    Fisher_p = pchisq(Fisher_chisq, df = 4, lower.tail = FALSE),
    Fisher_padj = p.adjust(Fisher_p, method = "BH")
  ) %>%
  ungroup()

# ---- Save file ----
write_csv(common_up, "go_bp_overlap_up_with_fisher.csv")

################################################################################################################

# ---- Select top 20 GO terms by Fisher adjusted p-value ----
top_common <- common_up %>%
  arrange(Fisher_padj) %>%
  slice_head(n = 20) %>%
  mutate(Description = str_wrap(Description, width = 40))

# ---- Convert to long format for plotting ----
top_long <- top_common %>%
  pivot_longer(cols = c(padj_Acute, padj_Rep),
               names_to = "Condition", values_to = "padj") %>%
  mutate(negLogPadj = -log10(padj))

# ---- Make the plot object ----
p <- ggplot(top_long, aes(x = reorder(Description, negLogPadj),
                          y = negLogPadj, fill = Condition)) +
  geom_col(position = "dodge") +
  scale_fill_manual(values = c("padj_Acute"="#E41A1C", "padj_Rep"="#377EB8")) +
  labs(title="Top 20 Common GO:BP Terms (UP_regulated Acute vs Replicative)",
       x="GO Biological Process",
       y="-log10(Fisher_adjusted p-value)") +
  theme_minimal(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, size = 8),
    plot.title = element_text(hjust = 0.5, face="bold")
  )

# ---- Save the plot ----
ggsave("go_bp_overlap_up_top20.png", p, width=12, height=6, dpi=800)

################################################################################################################
################################################################################################################
################################################################################################################

#### Common values for down files and plots  



library(tidyverse)
library(ggvenn)
library(dplyr)

# ---- Load results ----
acute_down <- read_csv("go_bp_acute_down.csv")
rep_down   <- read_csv("go_bp_replicative_down.csv")
acute_terms1 <- acute_down$Description
rep_terms1   <- rep_down$Description
# ---- 1. Venn Diagram ----
venn_data <- list(
  acute_down = acute_terms1,
  Replicative_down = rep_terms1
)

png("go_bp_venn_down.png", width = 1600, height = 1200, res = 300)
ggvenn(venn_data,
       fill_color = c("#E41A1C", "#377EB8"),
       stroke_size = 0.8, set_name_size = 5) +
  ggtitle("Overlap of GO:BP terms (Acute down vs Replicative down)")
dev.off()





# ---- Find common GO terms ----
common_down <- inner_join(
  acute_down %>% dplyr::select(ID, Description, padj_Acute = p.adjust, FoldEnrichment_Acute = FoldEnrichment),
  rep_down   %>% dplyr::select(ID, Description, padj_Rep = p.adjust, FoldEnrichment_Rep = FoldEnrichment),
  by = c("ID","Description")
)

# ---- Fisher’s method for combined p-value ----
common_down <- common_down %>%
  rowwise() %>%
  mutate(
    Fisher_chisq = -2 * (log(padj_Acute) + log(padj_Rep)),
    Fisher_p = pchisq(Fisher_chisq, df = 4, lower.tail = FALSE),
    Fisher_padj = p.adjust(Fisher_p, method = "BH")
  ) %>%
  ungroup()

# ---- Save file ----
write_csv(common_down, "go_bp_overlap_down_with_fisher.csv")

################################################################################################################

# ---- Select top 20 GO terms by Fisher adjusted p-value ----
top_common_down <- common_down %>%
  arrange(Fisher_padj) %>%
  slice_head(n = 20) %>%
  mutate(Description = str_wrap(Description, width = 40))

# ---- Convert to long format for plotting ----
top_long_down <- top_common_down %>%
  pivot_longer(cols = c(padj_Acute, padj_Rep),
               names_to = "Condition", values_to = "padj") %>%
  mutate(negLogPadj = -log10(padj))

# ---- Make the plot object ----
p_down <- ggplot(top_long_down, aes(x = reorder(Description, negLogPadj),
                                    y = negLogPadj, fill = Condition)) +
  geom_col(position = "dodge") +
  scale_fill_manual(values = c("padj_Acute"="#E41A1C", "padj_Rep"="#377EB8")) +
  labs(title="Top 20 Common GO:BP Terms (Down-regulated, Acute vs Replicative)",
       x="GO Biological Process",
       y="-log10(Fisher_adjusted p-value)") +
  theme_minimal(base_size = 12) +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, size = 8),
    plot.title = element_text(hjust = 0.5, face="bold")
  )

# ---- Save the plot ----
ggsave("go_bp_overlap_down_top20.png", p_down, width=12, height=6, dpi=800)
    library(tidyverse)
library(clusterProfiler)
library(org.Hs.eg.db)
library(ReactomePA)
library(stringr)
library(ggvenn)
library(dplyr)

# -------------------------
# Acute Up
# -------------------------
acute_up <- read_csv("acute_up_degs.csv")
genes_up <- acute_up$GeneID

ereact_acute_up <- enrichPathway(gene          = genes_up,
                                 organism      = "human",
                                 pvalueCutoff  = 0.05,
                                 pAdjustMethod = "BH",
                                 qvalueCutoff  = 0.05,
                                 readable      = TRUE)

write_csv(as.data.frame(ereact_acute_up), "reactome_acute_up.csv")

# -------------------------
# Acute Down
# -------------------------
acute_down <- read_csv("acute_down_degs.csv")
genes_down <- acute_down$GeneID

ereact_acute_down <- enrichPathway(gene          = genes_down,
                                   organism      = "human",
                                   pvalueCutoff  = 0.05,
                                   pAdjustMethod = "BH",
                                   qvalueCutoff  = 0.05,
                                   readable      = TRUE)

write_csv(as.data.frame(ereact_acute_down), "reactome_acute_down.csv")

# -------------------------
# Replicative Up
# -------------------------
rep_up <- read_csv("replicative_up_degs.csv")
genes_up1 <- rep_up$GeneID

ereact_rep_up <- enrichPathway(gene          = genes_up1,
                               organism      = "human",
                               pvalueCutoff  = 0.05,
                               pAdjustMethod = "BH",
                               qvalueCutoff  = 0.05,
                               readable      = TRUE)

write_csv(as.data.frame(ereact_rep_up), "reactome_replicative_up.csv")

# -------------------------
# Replicative Down
# -------------------------
rep_down <- read_csv("replicative_down_degs.csv")
genes_down1 <- rep_down$GeneID

ereact_rep_down <- enrichPathway(gene          = genes_down1,
                                 organism      = "human",
                                 pvalueCutoff  = 0.05,
                                 pAdjustMethod = "BH",
                                 qvalueCutoff  = 0.05,
                                 readable      = TRUE)

write_csv(as.data.frame(ereact_rep_down), "reactome_replicative_down.csv")

#############################################################################################################
#### Common values for Up (Reactome) ####

acute_up <- read_csv("reactome_acute_up.csv")
rep_up   <- read_csv("reactome_replicative_up.csv")

venn_data <- list(
  Acute_Up = acute_up$Description,
  Replicative_Up = rep_up$Description
)

png("reactome_venn_up.png", width = 1600, height = 1200, res = 300)
ggvenn(venn_data,
       fill_color = c("#E41A1C", "#377EB8"),
       stroke_size = 0.8, set_name_size = 5) +
  ggtitle("Overlap of Reactome terms (Acute Up vs Replicative Up)")
dev.off()

common_up <- inner_join(
  acute_up %>% dplyr::select(ID, Description, padj_Acute = p.adjust, FoldEnrichment_Acute = FoldEnrichment),
  rep_up   %>% dplyr::select(ID, Description, padj_Rep = p.adjust, FoldEnrichment_Rep = FoldEnrichment),
  by = c("ID","Description")
) %>%
  rowwise() %>%
  mutate(
    Fisher_chisq = -2 * (log(padj_Acute) + log(padj_Rep)),
    Fisher_p = pchisq(Fisher_chisq, df = 4, lower.tail = FALSE),
    Fisher_padj = p.adjust(Fisher_p, method = "BH")
  ) %>%
  ungroup()

write_csv(common_up, "reactome_overlap_up_with_fisher.csv")

top_common <- common_up %>%
  arrange(Fisher_padj) %>%
  slice_head(n = 20) %>%
  mutate(Description = str_wrap(Description, width = 40))

top_long <- top_common %>%
  pivot_longer(cols = c(padj_Acute, padj_Rep),
               names_to = "Condition", values_to = "padj") %>%
  mutate(negLogPadj = -log10(padj))

p <- ggplot(top_long, aes(x = reorder(Description, negLogPadj),
                          y = negLogPadj, fill = Condition)) +
  geom_col(position = "dodge") +
  scale_fill_manual(values = c("padj_Acute"="#E41A1C", "padj_Rep"="#377EB8")) +
  labs(title="Top 20 Common Reactome Terms (Up-regulated, Acute vs Replicative)",
       x="Reactome Pathway",
       y="-log10(Fisher_adjusted p-value)") +
  theme_minimal(base_size = 12) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8),
        plot.title = element_text(hjust = 0.5, face="bold"))

ggsave("reactome_overlap_up_top20.png", p, width=12, height=6, dpi=800)

#############################################################################################################
#### Common values for Down (Reactome) ####

acute_down <- read_csv("reactome_acute_down.csv")
rep_down   <- read_csv("reactome_replicative_down.csv")

venn_data <- list(
  Acute_Down = acute_down$Description,
  Replicative_Down = rep_down$Description
)

png("reactome_venn_down.png", width = 1600, height = 1200, res = 300)
ggvenn(venn_data,
       fill_color = c("#E41A1C", "#377EB8"),
       stroke_size = 0.8, set_name_size = 5) +
  ggtitle("Overlap of Reactome terms (Acute Down vs Replicative Down)")
dev.off()

common_down <- inner_join(
  acute_down %>% dplyr::select(ID, Description, padj_Acute = p.adjust, FoldEnrichment_Acute = FoldEnrichment),
  rep_down   %>% dplyr::select(ID, Description, padj_Rep = p.adjust, FoldEnrichment_Rep = FoldEnrichment),
  by = c("ID","Description")
) %>%
  rowwise() %>%
  mutate(
    Fisher_chisq = -2 * (log(padj_Acute) + log(padj_Rep)),
    Fisher_p = pchisq(Fisher_chisq, df = 4, lower.tail = FALSE),
    Fisher_padj = p.adjust(Fisher_p, method = "BH")
  ) %>%
  ungroup()

write_csv(common_down, "reactome_overlap_down_with_fisher.csv")

top_common_down <- common_down %>%
  arrange(Fisher_padj) %>%
  slice_head(n = 20) %>%
  mutate(Description = str_wrap(Description, width = 40))

top_long_down <- top_common_down %>%
  pivot_longer(cols = c(padj_Acute, padj_Rep),
               names_to = "Condition", values_to = "padj") %>%
  mutate(negLogPadj = -log10(padj))

p_down <- ggplot(top_long_down, aes(x = reorder(Description, negLogPadj),
                                    y = negLogPadj, fill = Condition)) +
  geom_col(position = "dodge") +
  scale_fill_manual(values = c("padj_Acute"="#E41A1C", "padj_Rep"="#377EB8")) +
  labs(title="Top 20 Common Reactome Terms (Down-regulated, Acute vs Replicative)",
       x="Reactome Pathway",
       y="-log10(Fisher_adjusted p-value)") +
  theme_minimal(base_size = 12) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8),
        plot.title = element_text(hjust = 0.5, face="bold"))

ggsave("reactome_overlap_down_top20.png", p_down, width=12, height=6, dpi=800)
